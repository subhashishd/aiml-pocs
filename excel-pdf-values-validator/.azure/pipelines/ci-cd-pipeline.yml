# Azure DevOps CI/CD Pipeline for Excel-PDF-Validator
# Triggers: GitHub webhook from public repository (unlimited runs)
# Target: Oracle VM with Kong API Gateway + Google OAuth
# Registry: Docker Hub (2GB free tier)

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - excel-pdf-values-validator/*
    exclude:
      - excel-pdf-values-validator/README.md
      - excel-pdf-values-validator/docs/*

variables:
  # Variable Groups (configure in Azure DevOps)
  - group: Excel-PDF-Secrets      # Secure variables
  - group: Excel-PDF-Config       # Plain variables
  
  # Pipeline Variables
  - name: dockerHubRepo
    value: $(DOCKER_HUB_USERNAME)/excel-pdf-validator
  - name: buildNumber
    value: $(Build.BuildNumber)
  - name: commitSha
    value: $(Build.SourceVersion)
  - name: workingDirectory
    value: excel-pdf-values-validator

pool:
  # Use self-hosted agent on Oracle VM for deployment
  name: OracleVM-Agent
  demands:
    - docker

stages:
  #============================================================================
  # STAGE 1: BUILD & TEST
  #============================================================================
  - stage: BuildAndTest
    displayName: 'Build & Test'
    jobs:
      - job: BackendTests
        displayName: 'Backend Tests & Build'
        steps:
          - checkout: self
            displayName: 'Checkout Repository'

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.11'
            displayName: 'Set Python Version'

          - script: |
              cd $(workingDirectory)/fastapi
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              pip install pytest pytest-cov pytest-asyncio
            displayName: 'Install Python Dependencies'

          - script: |
              cd $(workingDirectory)/fastapi
              python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
            displayName: 'Run Backend Tests'

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: '$(workingDirectory)/fastapi/test-results.xml'
              testRunTitle: 'Backend Tests'
            condition: succeededOrFailed()

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(workingDirectory)/fastapi/coverage.xml'
            condition: succeededOrFailed()

      - job: FrontendTests
        displayName: 'Frontend Tests & Build'
        steps:
          - checkout: self
            displayName: 'Checkout Repository'

          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Set Node.js Version'

          - script: |
              cd $(workingDirectory)/frontend
              npm ci
            displayName: 'Install Frontend Dependencies'

          - script: |
              cd $(workingDirectory)/frontend
              npm run test:unit -- --coverage --watchAll=false
            displayName: 'Run Frontend Unit Tests'

          - script: |
              cd $(workingDirectory)/frontend
              npm run build
            displayName: 'Build Frontend'

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: '$(workingDirectory)/frontend/test-results.xml'
              testRunTitle: 'Frontend Tests'
            condition: succeededOrFailed()

      - job: DockerBuild
        displayName: 'Docker Build & Push'
        dependsOn: 
          - BackendTests
          - FrontendTests
        condition: succeeded()
        steps:
          - checkout: self
            displayName: 'Checkout Repository'

          - task: Docker@2
            displayName: 'Login to Docker Hub'
            inputs:
              command: 'login'
              containerRegistry: 'DockerHub-Connection'

          # Build Backend Image
          - task: Docker@2
            displayName: 'Build Backend Image'
            inputs:
              command: 'build'
              dockerfile: '$(workingDirectory)/fastapi/Dockerfile'
              buildContext: '$(workingDirectory)/fastapi'
              repository: '$(dockerHubRepo)-backend'
              tags: |
                $(buildNumber)
                latest

          # Build Frontend Image
          - task: Docker@2
            displayName: 'Build Frontend Image'
            inputs:
              command: 'build'
              dockerfile: '$(workingDirectory)/frontend/Dockerfile'
              buildContext: '$(workingDirectory)/frontend'
              repository: '$(dockerHubRepo)-frontend'
              tags: |
                $(buildNumber)
                latest
              arguments: '--build-arg REACT_APP_API_URL=http://$(ORACLE_VM_IP)'

          # Build Celery Worker Image
          - task: Docker@2
            displayName: 'Build Celery Worker Image'
            inputs:
              command: 'build'
              dockerfile: '$(workingDirectory)/fastapi/Dockerfile.celery'
              buildContext: '$(workingDirectory)/fastapi'
              repository: '$(dockerHubRepo)-celery'
              tags: |
                $(buildNumber)
                latest

          # Build Nginx Gateway Image
          - task: Docker@2
            displayName: 'Build Nginx Image'
            inputs:
              command: 'build'
              dockerfile: '$(workingDirectory)/nginx/Dockerfile'
              buildContext: '$(workingDirectory)/nginx'
              repository: '$(dockerHubRepo)-nginx'
              tags: |
                $(buildNumber)
                latest

          # Push all images
          - task: Docker@2
            displayName: 'Push Backend Image'
            inputs:
              command: 'push'
              repository: '$(dockerHubRepo)-backend'
              tags: |
                $(buildNumber)
                latest

          - task: Docker@2
            displayName: 'Push Frontend Image'
            inputs:
              command: 'push'
              repository: '$(dockerHubRepo)-frontend'
              tags: |
                $(buildNumber)
                latest

          - task: Docker@2
            displayName: 'Push Celery Image'
            inputs:
              command: 'push'
              repository: '$(dockerHubRepo)-celery'
              tags: |
                $(buildNumber)
                latest

          - task: Docker@2
            displayName: 'Push Nginx Image'
            inputs:
              command: 'push'
              repository: '$(dockerHubRepo)-nginx'
              tags: |
                $(buildNumber)
                latest

  #============================================================================
  # STAGE 2: DEPLOY TO ORACLE VM
  #============================================================================
  - stage: Deploy
    displayName: 'Deploy to Oracle VM'
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - deployment: DeployToOracleVM
        displayName: 'Deploy to Oracle VM with Kong Gateway'
        environment: 'OracleVM-Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: 'Checkout Repository'

                - task: Docker@2
                  displayName: 'Login to Docker Hub'
                  inputs:
                    command: 'login'
                    containerRegistry: 'DockerHub-Connection'

                # Create deployment directory structure
                - script: |
                    sudo mkdir -p /opt/excel-pdf-validator/{config,data,logs,models}
                    sudo chown -R $(whoami):$(whoami) /opt/excel-pdf-validator
                  displayName: 'Create Deployment Directories'

                # Generate environment file with all configurations
                - script: |
                    cd /opt/excel-pdf-validator
                    
                    # Create environment file
                    cat > .env << EOF
                    # Build Information
                    BUILD_NUMBER=$(buildNumber)
                    COMMIT_SHA=$(commitSha)
                    
                    # Docker Hub Configuration
                    DOCKER_HUB_REPO=$(dockerHubRepo)
                    
                    # Oracle VM Configuration
                    ORACLE_VM_IP=$(ORACLE_VM_IP)
                    
                    # Google OAuth Configuration
                    GOOGLE_CLIENT_ID=$(GOOGLE_CLIENT_ID)
                    GOOGLE_CLIENT_SECRET=$(GOOGLE_CLIENT_SECRET)
                    ALLOWED_EMAILS=$(ALLOWED_EMAILS)
                    
                    # Kong Configuration
                    KONG_DATABASE=postgres
                    KONG_PG_HOST=kong-database
                    KONG_PG_DATABASE=kong
                    KONG_PG_USER=kong
                    KONG_PG_PASSWORD=$(KONG_DB_PASSWORD)
                    
                    # Application Configuration
                    DATABASE_URL=postgresql://postgres:$(POSTGRES_PASSWORD)@postgres:5432/validation_agents
                    REDIS_URL=redis://redis:6379/0
                    
                    # JWT Configuration
                    JWT_SECRET_KEY=$(JWT_SECRET_KEY)
                    SESSION_SECRET=$(SESSION_SECRET)
                    
                    # ML Configuration
                    USE_MULTIMODAL_PDF=true
                    SENTENCE_TRANSFORMERS_HOME=/app/models
                    EOF
                  displayName: 'Generate Environment Configuration'

                # Copy Kong configuration
                - script: |
                    cd /opt/excel-pdf-validator
                    
                    # Copy Kong configuration files
                    cp -r $(workingDirectory)/kong/* config/
                    
                    # Update Kong configuration with environment variables
                    envsubst < config/kong.yml.template > config/kong.yml
                  displayName: 'Configure Kong Gateway'

                # Copy Docker Compose configuration
                - script: |
                    cd /opt/excel-pdf-validator
                    
                    # Copy main docker-compose file
                    cp $(workingDirectory)/docker-compose.prod.yml docker-compose.yml
                    
                    # Copy Kong-specific compose file
                    cp $(workingDirectory)/docker-compose.kong.yml docker-compose.kong.yml
                  displayName: 'Copy Docker Compose Configuration'

                # Deploy Kong Gateway first
                - script: |
                    cd /opt/excel-pdf-validator
                    
                    echo "🚀 Deploying Kong Gateway..."
                    docker-compose -f docker-compose.kong.yml up -d
                    
                    # Wait for Kong to be healthy
                    echo "⏳ Waiting for Kong to be ready..."
                    timeout 120 bash -c 'until curl -f http://localhost:8001/status > /dev/null 2>&1; do sleep 5; echo "Waiting for Kong..."; done'
                    
                    if [ $? -eq 0 ]; then
                        echo "✅ Kong is ready"
                    else
                        echo "❌ Kong failed to start"
                        exit 1
                    fi
                  displayName: 'Deploy Kong Gateway'

                # Configure Kong OIDC Plugin
                - script: |
                    cd /opt/excel-pdf-validator
                    
                    echo "🔧 Configuring Kong OIDC Plugin..."
                    
                    # Install OIDC plugin if not already installed
                    docker-compose -f docker-compose.kong.yml exec -T kong luarocks install lua-resty-openidc
                    
                    # Restart Kong to load plugin
                    docker-compose -f docker-compose.kong.yml restart kong
                    
                    # Wait for Kong to restart
                    sleep 30
                    
                    # Configure services and routes
                    bash config/setup-kong-auth.sh
                  displayName: 'Configure Kong Authentication'

                # Deploy Application Services
                - script: |
                    cd /opt/excel-pdf-validator
                    
                    echo "🚀 Deploying Application Services..."
                    
                    # Pull latest images
                    docker-compose pull
                    
                    # Stop existing services gracefully
                    docker-compose down --timeout 30
                    
                    # Start services
                    docker-compose up -d
                    
                    echo "⏳ Waiting for services to be healthy..."
                    
                    # Wait for database
                    timeout 120 bash -c 'until docker-compose exec -T postgres pg_isready -U postgres > /dev/null 2>&1; do sleep 5; echo "Waiting for database..."; done'
                    
                    # Wait for Redis
                    timeout 60 bash -c 'until docker-compose exec -T redis redis-cli ping > /dev/null 2>&1; do sleep 5; echo "Waiting for Redis..."; done'
                    
                    # Wait for backend
                    timeout 180 bash -c 'until curl -f http://localhost:8000/health > /dev/null 2>&1; do sleep 10; echo "Waiting for backend..."; done'
                    
                    # Wait for frontend
                    timeout 120 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 5; echo "Waiting for frontend..."; done'
                    
                    if [ $? -eq 0 ]; then
                        echo "✅ All services are healthy"
                    else
                        echo "❌ Some services failed to start"
                        echo "📋 Service status:"
                        docker-compose ps
                        echo "📋 Recent logs:"
                        docker-compose logs --tail=50
                        exit 1
                    fi
                  displayName: 'Deploy Application Services'

                # Configure Kong Routes for Application
                - script: |
                    cd /opt/excel-pdf-validator
                    
                    echo "🔧 Configuring Kong Routes for Application..."
                    
                    # Configure routes with authentication
                    bash config/setup-kong-routes.sh
                  displayName: 'Configure Kong Routes'

                # Health Checks and Smoke Tests
                - script: |
                    cd /opt/excel-pdf-validator
                    
                    echo "🔍 Running Health Checks..."
                    
                    # Test public endpoints (should work without auth)
                    curl -f http://$(ORACLE_VM_IP)/ || echo "❌ Landing page failed"
                    curl -f http://$(ORACLE_VM_IP)/health || echo "❌ Health endpoint failed"
                    
                    # Test Kong admin
                    curl -f http://localhost:8001/status || echo "❌ Kong admin failed"
                    
                    # Test authentication redirect (should redirect to Google)
                    response=$(curl -s -o /dev/null -w "%{http_code}" http://$(ORACLE_VM_IP)/app/)
                    if [ "$response" = "302" ] || [ "$response" = "200" ]; then
                        echo "✅ Authentication flow working"
                    else
                        echo "❌ Authentication flow failed (HTTP $response)"
                    fi
                    
                    echo "📊 Final Service Status:"
                    docker-compose ps
                    
                    echo "📊 Kong Services:"
                    curl -s http://localhost:8001/services | jq .
                    
                    echo "📊 Kong Routes:"
                    curl -s http://localhost:8001/routes | jq .
                  displayName: 'Health Checks and Smoke Tests'

                # Cleanup old Docker images to save space
                - script: |
                    echo "🧹 Cleaning up old Docker images..."
                    docker system prune -f
                    docker image prune -f
                  displayName: 'Cleanup Old Images'

                # Send deployment notification
                - script: |
                    echo "🎉 Deployment completed successfully!"
                    echo "🌐 Application URL: http://$(ORACLE_VM_IP)"
                    echo "🔧 Kong Admin: http://$(ORACLE_VM_IP):8001"
                    echo "📊 Build Number: $(buildNumber)"
                    echo "📊 Commit SHA: $(commitSha)"
                    
                    # Log deployment info
                    echo "$(date): Deployment $(buildNumber) completed successfully" >> /opt/excel-pdf-validator/logs/deployments.log
                  displayName: 'Deployment Notification'

  #============================================================================
  # STAGE 3: POST-DEPLOYMENT VERIFICATION
  #============================================================================
  - stage: PostDeployment
    displayName: 'Post-Deployment Verification'
    dependsOn: Deploy
    condition: succeeded()
    jobs:
      - job: VerifyDeployment
        displayName: 'Verify Deployment'
        steps:
          - script: |
              echo "🔍 Running Extended Health Checks..."
              
              # Wait a bit for services to fully stabilize
              sleep 30
              
              # Test all public endpoints
              endpoints=(
                "http://$(ORACLE_VM_IP)/"
                "http://$(ORACLE_VM_IP)/health"
                "http://$(ORACLE_VM_IP)/docs"
              )
              
              failed=0
              for endpoint in "${endpoints[@]}"; do
                if curl -f -s "$endpoint" > /dev/null; then
                  echo "✅ $endpoint - OK"
                else
                  echo "❌ $endpoint - FAILED"
                  failed=1
                fi
              done
              
              # Test authentication endpoints
              auth_response=$(curl -s -o /dev/null -w "%{http_code}" http://$(ORACLE_VM_IP)/app/)
              if [ "$auth_response" = "302" ]; then
                echo "✅ Authentication redirect - OK"
              else
                echo "❌ Authentication redirect - FAILED (HTTP $auth_response)"
                failed=1
              fi
              
              if [ $failed -eq 1 ]; then
                echo "❌ Some health checks failed"
                exit 1
              else
                echo "✅ All health checks passed"
              fi
            displayName: 'Extended Health Checks'

          - script: |
              echo "📊 Deployment Summary:"
              echo "========================"
              echo "🚀 Application: Excel-PDF-Validator"
              echo "🌐 URL: http://$(ORACLE_VM_IP)"
              echo "🔐 Authentication: Google OAuth + Email Whitelist"
              echo "📦 Build: $(buildNumber)"
              echo "📅 Deployed: $(date)"
              echo "✅ Status: Healthy"
              echo "========================"
            displayName: 'Deployment Summary'
