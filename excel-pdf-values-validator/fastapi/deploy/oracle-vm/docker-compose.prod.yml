version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: validator-ai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-validator_ai}
      POSTGRES_USER: ${POSTGRES_USER:-validator_ai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - validator-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-validator_ai} -d ${POSTGRES_DB:-validator_ai}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: validator-ai-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - validator-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    image: ${DOCKER_REGISTRY:-local}/validator-ai-backend:${APP_VERSION:-latest}
    container_name: validator-ai-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-validator_ai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-validator_ai}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Application
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: "false"
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,your-oracle-vm-host.com}
      
      # File Storage
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      
      # AI/ML Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MODEL_NAME: ${MODEL_NAME:-gpt-3.5-turbo}
      
      # Celery
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - validator-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Celery Worker
  celery-worker:
    image: ${DOCKER_REGISTRY:-local}/validator-ai-backend:${APP_VERSION:-latest}
    container_name: validator-ai-celery-worker
    restart: unless-stopped
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Same as backend
      DATABASE_URL: postgresql://${POSTGRES_USER:-validator_ai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-validator_ai}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      MODEL_NAME: ${MODEL_NAME:-gpt-3.5-turbo}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - validator-ai-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Celery Beat (Scheduler)
  celery-beat:
    image: ${DOCKER_REGISTRY:-local}/validator-ai-backend:${APP_VERSION:-latest}
    container_name: validator-ai-celery-beat
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Same as backend
      DATABASE_URL: postgresql://${POSTGRES_USER:-validator_ai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-validator_ai}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - logs_data:/app/logs
    networks:
      - validator-ai-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Frontend
  frontend:
    image: ${DOCKER_REGISTRY:-local}/validator-ai-frontend:${APP_VERSION:-latest}
    container_name: validator-ai-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./ssl:/etc/ssl/certs:ro
      - logs_data:/var/log/nginx
    networks:
      - validator-ai-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx Load Balancer (if scaling backend)
  nginx-lb:
    image: nginx:alpine
    container_name: validator-ai-nginx-lb
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - validator-ai-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: validator-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - validator-ai-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: validator-ai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - validator-ai-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/validator-ai/data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/validator-ai/data/redis
  
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/validator-ai/uploads
  
  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/validator-ai
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/validator-ai/data/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/validator-ai/data/grafana

networks:
  validator-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
