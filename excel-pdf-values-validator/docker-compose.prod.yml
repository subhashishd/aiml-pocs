# Production Docker Compose Configuration for Excel-PDF-Validator
# Optimized for Oracle VM deployment with Kong Gateway integration
version: '3.8'

networks:
  app-net:
    driver: bridge
  kong-net:
    driver: bridge
    external: true

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-models:
    driver: local
  app-uploads:
    driver: local
  app-logs:
    driver: local

services:
  #============================================================================
  # DATABASE (PostgreSQL)
  #============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: excel-pdf-database
    environment:
      POSTGRES_DB: validation_agents
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-net
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d validation_agents"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  #============================================================================
  # REDIS (Cache & Message Queue)
  #============================================================================
  redis:
    image: redis:7-alpine
    container_name: excel-pdf-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - app-net
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  #============================================================================
  # BACKEND (FastAPI)
  #============================================================================
  backend:
    image: ${DOCKER_HUB_REPO}-backend:${BUILD_NUMBER:-latest}
    container_name: excel-pdf-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/validation_agents
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      
      # Google OAuth Configuration
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      
      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      SESSION_SECRET: ${SESSION_SECRET}
      
      # Application Configuration
      ENVIRONMENT: production
      DEBUG: false
      USE_MULTIMODAL_PDF: true
      ALLOWED_ORIGINS: http://${ORACLE_VM_IP},https://${ORACLE_VM_IP}
      
      # ML Model Configuration
      SENTENCE_TRANSFORMERS_HOME: /app/models
      HF_HOME: /app/models
      
      # Security Configuration
      ALLOWED_EMAILS: ${ALLOWED_EMAILS}
      
      # Performance Configuration
      WORKERS: 2
      MAX_WORKERS: 4
      WORKER_TIMEOUT: 300
      
      # File Upload Configuration
      MAX_UPLOAD_SIZE: 50000000  # 50MB
      UPLOAD_DIR: /app/uploads
    
    volumes:
      - app-models:/app/models
      - app-uploads:/app/uploads
      - app-logs:/app/logs
    
    networks:
      - app-net
      - kong-net
    
    # Internal port only - exposed via Kong Gateway
    ports:
      - "8000:8000"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  #============================================================================
  # CELERY WORKER (Background Tasks)
  #============================================================================
  celery-worker:
    image: ${DOCKER_HUB_REPO}-celery:${BUILD_NUMBER:-latest}
    container_name: excel-pdf-celery
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/validation_agents
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      
      # Celery Configuration
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      CELERY_TASK_SERIALIZER: json
      CELERY_RESULT_SERIALIZER: json
      CELERY_ACCEPT_CONTENT: '["json"]'
      CELERY_TIMEZONE: UTC
      
      # ML Model Configuration
      USE_MULTIMODAL_PDF: true
      SENTENCE_TRANSFORMERS_HOME: /app/models
      HF_HOME: /app/models
      
      # Worker Configuration
      CELERY_CONCURRENCY: 2
      CELERY_MAX_TASKS_PER_CHILD: 50
      CELERY_TASK_TIME_LIMIT: 1800  # 30 minutes
      
      # File Configuration
      UPLOAD_DIR: /app/uploads
    
    volumes:
      - app-models:/app/models
      - app-uploads:/app/uploads
      - app-logs:/app/logs
    
    networks:
      - app-net
    
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  #============================================================================
  # FRONTEND (React)
  #============================================================================
  frontend:
    image: ${DOCKER_HUB_REPO}-frontend:${BUILD_NUMBER:-latest}
    container_name: excel-pdf-frontend
    depends_on:
      - backend
    environment:
      # API Configuration
      REACT_APP_API_URL: http://${ORACLE_VM_IP}
      
      # Google OAuth Configuration (for frontend)
      REACT_APP_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      
      # Build Configuration
      NODE_ENV: production
      GENERATE_SOURCEMAP: false
    
    networks:
      - app-net
      - kong-net
    
    # Internal port only - exposed via Kong Gateway
    ports:
      - "3000:3000"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  #============================================================================
  # NGINX (Reverse Proxy & Load Balancer)
  #============================================================================
  nginx:
    image: ${DOCKER_HUB_REPO}-nginx:${BUILD_NUMBER:-latest}
    container_name: excel-pdf-nginx
    depends_on:
      - frontend
      - backend
    environment:
      # Upstream Configuration
      FRONTEND_HOST: frontend:3000
      BACKEND_HOST: backend:8000
      
      # SSL Configuration (for future HTTPS setup)
      SSL_ENABLED: false
      
      # Performance Configuration
      WORKER_PROCESSES: auto
      WORKER_CONNECTIONS: 1024
    
    volumes:
      - app-uploads:/var/www/uploads:ro
      - app-logs:/var/log/nginx
    
    networks:
      - app-net
      - kong-net
    
    # Internal port only - exposed via Kong Gateway
    ports:
      - "8080:80"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  #============================================================================
  # MONITORING & HEALTH CHECKS
  #============================================================================
  health-monitor:
    image: curlimages/curl:latest
    container_name: excel-pdf-monitor
    depends_on:
      - backend
      - frontend
      - nginx
    command: |
      sh -c '
        while true; do
          echo "$(date): Health check starting..."
          
          # Check backend health
          if curl -f -s http://backend:8000/health > /dev/null; then
            echo "$(date): Backend - OK"
          else
            echo "$(date): Backend - FAILED"
          fi
          
          # Check frontend health
          if curl -f -s http://frontend:3000 > /dev/null; then
            echo "$(date): Frontend - OK" 
          else
            echo "$(date): Frontend - FAILED"
          fi
          
          # Check nginx health
          if curl -f -s http://nginx:80/health > /dev/null; then
            echo "$(date): Nginx - OK"
          else
            echo "$(date): Nginx - FAILED"
          fi
          
          echo "$(date): Health check completed"
          sleep 300  # Check every 5 minutes
        done
      '
    networks:
      - app-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

  #============================================================================
  # LOG AGGREGATOR (Optional - for centralized logging)
  #============================================================================
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: excel-pdf-logs
    volumes:
      - app-logs:/fluentd/log
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
    networks:
      - app-net
    ports:
      - "24224:24224"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
